#!/usr/bin/env python3
import os
import sys
import shlex
import importlib.util
import urllib.request
import json

def cmd_ls(args):
    path = args[0] if args else '.'
    try:
        for entry in os.listdir(path):
            print(entry)
    except Exception as e:
        print(f"ls: {e}")

def cmd_cd(args):
    # Fix: If no args, cd to home directory
    if not args:
        try:
            os.chdir(os.path.expanduser("~"))
        except Exception as e:
            print(f"cd: {e}")
        return
    try:
        os.chdir(args[0])
    except Exception as e:
        print(f"cd: {e}")

def cmd_mkdir(args):
    if not args:
        print("mkdir: missing operand")
        return
    try:
        os.makedirs(args[0], exist_ok=True)
    except Exception as e:
        print(f"mkdir: {e}")

def cmd_exit(args):
    sys.exit(0)

AERO_DIR = os.path.dirname(os.path.abspath(__file__))
PLUGINS_DIR = os.path.join(AERO_DIR, "plugins")
REPO_PLUGINS_URL = "https://raw.githubusercontent.com/nebuff/aero/main/plugins"
CONFIG_PATH = os.path.join(AERO_DIR, "config.json")

# Command registry for easy extension
COMMANDS = {
    'ls': cmd_ls,
    'cd': cmd_cd,
    'mkdir': cmd_mkdir,
    'exit': cmd_exit,
    'quit': cmd_exit,
}

def installist(args):
    # List installed plugins (without .py)
    if not os.path.isdir(PLUGINS_DIR):
        print("No plugins directory found.")
        return
    installed = [f[:-3] for f in os.listdir(PLUGINS_DIR) if f.endswith(".py")]
    if installed:
        print("Installed plugins:")
        for plugin in installed:
            print(f"- {plugin}")
    else:
        print("No plugins installed.")

    # List available plugins from the repo (using GitHub API)
    try:
        import ssl
        import json as _json
        api_url = "https://api.github.com/repos/nebuff/aero/contents/plugins"
        context = ssl._create_unverified_context()
        with urllib.request.urlopen(api_url, context=context) as resp:
            data = resp.read().decode()
        files = _json.loads(data)
        available = set()
        for f in files:
            name = f.get("name", "")
            if name.endswith(".py"):
                available.add(name[:-3])
        if available:
            print("\nAvalilble plugins:")
            for plugin in sorted(available):
                mark = "[x]" if plugin in installed else "[ ]"
                print(f"{mark} {plugin}")
        else:
            print("\nNo available plugins found in repo.")
    except Exception as e:
        print(f"\nCould not fetch available plugins from repo: {e}")

COMMANDS['installist'] = installist

def install_plugin(args):
    if not args:
        print("install: missing plugin name")
        return
    plugin_name = args[0]
    # Remove .py if present
    if plugin_name.endswith(".py"):
        plugin_name = plugin_name[:-3]
    plugin_file = f"{plugin_name}.py"
    url = f"{REPO_PLUGINS_URL}/{plugin_file}"
    dest = os.path.join(PLUGINS_DIR, plugin_file)
    try:
        import ssl
        context = ssl._create_unverified_context()
        print(f"Downloading plugin from {url} ...")
        with urllib.request.urlopen(url, context=context) as response, open(dest, "wb") as out_file:
            out_file.write(response.read())
        print(f"Installed plugin '{plugin_name}'. Restart Aero to load it.")
    except Exception as e:
        print(f"Failed to install plugin: {e}")

COMMANDS['install'] = install_plugin

def installdelete(args):
    if not args:
        print("installdelete: missing plugin name")
        return
    plugin_name = args[0]
    # Remove .py if present
    if plugin_name.endswith(".py"):
        plugin_name = plugin_name[:-3]
    plugin_file = f"{plugin_name}.py"
    plugin_path = os.path.join(PLUGINS_DIR, plugin_file)
    if os.path.isfile(plugin_path):
        try:
            os.remove(plugin_path)
            print(f"Deleted plugin '{plugin_name}'. Restart Aero to unload it.")
        except Exception as e:
            print(f"Failed to delete plugin: {e}")
    else:
        print(f"Plugin '{plugin_name}' is not installed.")

COMMANDS['installdelete'] = installdelete

def load_plugins():
    if not os.path.isdir(PLUGINS_DIR):
        return
    for fname in os.listdir(PLUGINS_DIR):
        if fname.endswith(".py"):
            fpath = os.path.join(PLUGINS_DIR, fname)
            try:
                spec = importlib.util.spec_from_file_location(fname[:-3], fpath)
                mod = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(mod)
                if hasattr(mod, "register"):
                    mod.register(COMMANDS)
            except Exception as e:
                print(f"Failed to load plugin {fname}: {e}")

def main():
    os.system('clear')
    print("Aero Mac <-> by, Holden\n")
    computer_name = os.uname().nodename

    # Load plugins at startup
    load_plugins()

    # Re-register built-in commands after plugins to ensure they are present
    COMMANDS['ls'] = cmd_ls
    COMMANDS['cd'] = cmd_cd
    COMMANDS['mkdir'] = cmd_mkdir
    COMMANDS['exit'] = cmd_exit
    COMMANDS['quit'] = cmd_exit
    COMMANDS['install'] = install_plugin
    COMMANDS['installist'] = installist
    COMMANDS['installdelete'] = installdelete

    ctrl_c_count = 0
    while True:
        try:
            inp = input(f"Aero@{computer_name} > ")
            ctrl_c_count = 0  # Reset on successful input
            if not inp.strip():
                continue
            parts = shlex.split(inp)
            cmd, *args = parts
            if cmd in COMMANDS:
                COMMANDS[cmd](args)
            else:
                print(f"Unknown command: {cmd}")
        except KeyboardInterrupt:
            if ctrl_c_count == 0:
                print("\n(Press Ctrl+C again to exit Aero)")
                ctrl_c_count = 1
                continue
            else:
                print(f"\nAero@{computer_name} >")
                confirm = ""
                try:
                    confirm = input("Are you sure you want to exit? (y/n): ").strip().lower()
                except KeyboardInterrupt:
                    print("\nExit cancelled.")
                    ctrl_c_count = 0
                    continue
                if confirm == "y":
                    print()
                    break
                else:
                    print("Exit cancelled.")
                    ctrl_c_count = 0
                    continue
        except EOFError:
            print()
            break
    print('To Run Aero Again type "aero" in terminal')

if __name__ == "__main__":
    main()
                    ctrl_c_count = 0
                    continue
        except EOFError:
            print()
            break
    print('To Run Aero Again type "aero" in terminal')

if __name__ == "__main__":
    main()
